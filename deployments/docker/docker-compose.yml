version: '3.8'

services:
  hamiltonian:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile.hamiltonian
    container_name: cert-hamiltonian
    ports:
      - "8000:8000"  # API
      - "9090:9090"  # Metrics
    environment:
      - PRELOAD_MODELS=true
      - MODEL_NAME=gpt2  # Use small model for testing
      - DEVICE=cpu
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
    volumes:
      - model-cache:/root/.cache/huggingface
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
    networks:
      - cert-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  coordination:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile.coordination
    container_name: cert-coordination
    ports:
      - "8001:8000"  # API
      - "9091:9090"  # Metrics
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
      - MAX_COST_PER_HOUR=10.0
    networks:
      - cert-network
    depends_on:
      - hamiltonian
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: cert-prometheus
    ports:
      - "9092:9090"
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - cert-network
    depends_on:
      - hamiltonian
      - coordination

  grafana:
    image: grafana/grafana:latest
    container_name: cert-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=cert_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ../grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - cert-network
    depends_on:
      - prometheus

volumes:
  model-cache:
  prometheus-data:
  grafana-data:

networks:
  cert-network:
    driver: bridge
